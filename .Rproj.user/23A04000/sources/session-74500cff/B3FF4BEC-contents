---
title: "Parallel"
format: html
---

---
title: "Practical One"
format: html
---

## Packages

```{r}
library(foreach)
library(doParallel)
library(MASS)
library(boot)
library(iterators)
library(parallel)
library(microbenchmark)

```

## Question 1

```{r}
numCores = detectCores() -1
cl <- makeCluster(numCores)
registerDoParallel(numCores)
n <- 100

results <- foreach(i = 1:n, .combine = rbind, .packages = "stats") %dopar% {
  sample_d <- rexp(100, rate = 1)
  mean_s <- mean(sample_d)
  var_s <- var(sample_d)
  c(mean_s, var_s)
}
stopCluster(cl)

result_df <- as.data.frame(results)
colnames(result_df) <- c("Mean", "Variance")
head(result_df)

```

## Question 2

First setting the number of bootstrap samples = 1000 and trying chunk sizes of 100 and 1000 respectively. Note that the first few results from the bootstrap are displayed to show that they are yeilding plausible output.
```{r}
numCores <- detectCores() - 1
cl <- makeCluster(numCores)
registerDoParallel(cl)

numBootstraps <- 1000
chunkSize <- 100

#Parralel bootstrapping
system.time({
  boot_parallel <- foreach(i = 1:numBootstraps, .combine = c, .packages = "MASS") %dopar% {
    samp_med <- median(sample(galaxies, replace = TRUE))
    samp_med
  }
})

# Serial Bootstrapping
system.time({
  boot_serial <- sapply(1:numBootstraps, function(i) median(sample(galaxies, replace = TRUE)))
})

# Chunked Parallel Bootstrapping
system.time({
  boot_chunked <- foreach(i = 1:(numBootstraps/chunkSize), .combine = c, .packages = "MASS") %dopar% {
    replicate(chunkSize, median(sample(galaxies, replace = TRUE))) 
  }
})

stopCluster(cl)

head(boot_parallel)
head(boot_serial)
head(boot_chunked)

chunkSize <- 1000

system.time({
  boot_parallel <- foreach(i = 1:numBootstraps, .combine = c, .packages = "MASS") %dopar% {
    samp_med <- median(sample(galaxies, replace = TRUE))
    samp_med
  }
})

# Serial Bootstrapping
system.time({
  boot_serial <- sapply(1:numBootstraps, function(i) median(sample(galaxies, replace = TRUE)))
})

# Chunked Parallel Bootstrapping
system.time({
  boot_chunked <- foreach(i = 1:(numBootstraps/chunkSize), .combine = c, .packages = "MASS") %dopar% {
    replicate(chunkSize, median(sample(galaxies, replace = TRUE)))
  }
})

stopCluster(cl)

head(boot_parallel)
head(boot_serial)
head(boot_chunked)

```

Now setting the number of bootstrap samples = 10000 and testing across the same chunk sizes.
```{r}
numBootstraps <- 10000
chunkSize <- 100

#Parralel bootstrapping
system.time({
  boot_parallel <- foreach(i = 1:numBootstraps, .combine = c, .packages = "MASS") %dopar% {
    samp_med <- median(sample(galaxies, replace = TRUE))
    samp_med
  }
})

# Serial Bootstrapping
system.time({
  boot_serial <- sapply(1:numBootstraps, function(i) median(sample(galaxies, replace = TRUE)))
})

# Chunked Parallel Bootstrapping
system.time({
  boot_chunked <- foreach(i = 1:(numBootstraps/chunkSize), .combine = c, .packages = "MASS") %dopar% {
    replicate(chunkSize, median(sample(galaxies, replace = TRUE))) 
  }
})

stopCluster(cl)

head(boot_parallel)
head(boot_serial)
head(boot_chunked)

chunkSize <- 1000

system.time({
  boot_parallel <- foreach(i = 1:numBootstraps, .combine = c, .packages = "MASS") %dopar% {
    samp_med <- median(sample(galaxies, replace = TRUE))
    samp_med
  }
})

# Serial Bootstrapping
system.time({
  boot_serial <- sapply(1:numBootstraps, function(i) median(sample(galaxies, replace = TRUE)))
})

# Chunked Parallel Bootstrapping
system.time({
  boot_chunked <- foreach(i = 1:(numBootstraps/chunkSize), .combine = c, .packages = "MASS") %dopar% {
    replicate(chunkSize, median(sample(galaxies, replace = TRUE)))
  }
})

stopCluster(cl)

head(boot_parallel)
head(boot_serial)
head(boot_chunked)
```

## Question 3

```{r}
speed_matrix = matrix(cbind(1, cars_data$speed), ncol=2)
Y = cars_data$dist

beta_hat = solve(t(speed_matrix) %*% speed_matrix) %*% t(speed_matrix) %*% Y
beta_hat
```

## Question 4

```{r,}
lm_model <- lm(dist ~ speed, data = cars_data)
summary(lm_model)$coefficients
```